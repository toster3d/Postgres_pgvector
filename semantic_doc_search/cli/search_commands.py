# semantic_doc_search/cli/search_commands.py
"""
Modu≈Ç CLI do wyszukiwania dokument√≥w.
Obs≈Çuguje semantyczne, pe≈Çnotekstowe i hybrydowe wyszukiwanie.
"""

import click
import json
from typing import Optional, List, Dict, Any
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import track
from rich.prompt import Prompt

from semantic_doc_search.core.database import DatabaseManager
from semantic_doc_search.core.embeddings import EmbeddingProvider
from semantic_doc_search.core.search import SearchEngine

console = Console()

@click.group()
def search_group():
    """üîç Wyszukiwanie dokument√≥w w systemie"""
    pass

@search_group.command("text")
@click.argument("query", type=str)
@click.option("--limit", "-l", default=10, help="Liczba wynik√≥w")
@click.option("--min-score", default=0.1, help="Minimalny score podobie≈Ñstwa")
@click.option("--show-content/--no-content", default=False, help="Poka≈º fragmenty tre≈õci")
@click.option("--export", type=click.Choice(["json", "csv"]), help="Eksportuj wyniki")
@click.option("--output", "-o", help="Plik wyj≈õciowy dla eksportu")
@click.pass_context
def text_search(ctx, query: str, limit: int, min_score: float, show_content: bool, 
                export: Optional[str], output: Optional[str]):
    """üìù Wyszukiwanie pe≈Çnotekstowe (PostgreSQL ts_search)"""
    
    db = ctx.obj['db']
    search_engine = SearchEngine(db)
    
    with console.status(f"[bold green]Wyszukiwanie: '{query}'..."):
        try:
            results = search_engine.text_search(
                query=query,
                limit=limit,
                min_score=min_score
            )
            
            if not results:
                console.print("[yellow]üîç Nie znaleziono dokument√≥w pasujƒÖcych do zapytania[/yellow]")
                return
            
            # Wy≈õwietlenie wynik√≥w
            _display_search_results(results, query, "Wyszukiwanie Pe≈Çnotekstowe", show_content)
            
            # Eksport je≈õli wymagany
            if export:
                _export_results(results, export, output, "text_search")
                
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd wyszukiwania: {e}[/red]")

@search_group.command("semantic")
@click.argument("query", type=str)
@click.option("--model", default="sentence-transformers", 
              type=click.Choice(["sentence-transformers", "openai", "sklearn"]),
              help="Model embeddings do u≈ºycia")
@click.option("--limit", "-l", default=10, help="Liczba wynik√≥w")
@click.option("--min-score", default=0.5, help="Minimalny score podobie≈Ñstwa")
@click.option("--show-content/--no-content", default=False, help="Poka≈º fragmenty tre≈õci")
@click.option("--export", type=click.Choice(["json", "csv"]), help="Eksportuj wyniki")
@click.option("--output", "-o", help="Plik wyj≈õciowy dla eksportu")
@click.pass_context
def semantic_search(ctx, query: str, model: str, limit: int, min_score: float, 
                   show_content: bool, export: Optional[str], output: Optional[str]):
    """üß† Wyszukiwanie semantyczne (podobie≈Ñstwo wektorowe)"""
    
    db = ctx.obj['db']
    search_engine = SearchEngine(db)
    
    with console.status(f"[bold blue]Generowanie embeddings dla zapytania..."):
        try:
            # Generowanie embedding dla zapytania
            provider = EmbeddingProvider()
            query_embedding = provider.encode(query, provider_name=model)
            
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd generowania embeddings: {e}[/red]")
            raise click.Abort()
    
    with console.status(f"[bold green]Wyszukiwanie semantyczne..."):
        try:
            results = search_engine.semantic_search(
                query_embedding=query_embedding,
                model_name=model,
                limit=limit,
                min_score=min_score
            )
            
            if not results:
                console.print("[yellow]üîç Nie znaleziono dokument√≥w semantycznie podobnych[/yellow]")
                return
            
            # Wy≈õwietlenie wynik√≥w
            _display_search_results(results, query, f"Wyszukiwanie Semantyczne ({model})", show_content)
            
            # Eksport je≈õli wymagany
            if export:
                _export_results(results, export, output, "semantic_search")
                
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd wyszukiwania semantycznego: {e}[/red]")

@search_group.command("hybrid")
@click.argument("query", type=str)
@click.option("--model", default="sentence-transformers", 
              type=click.Choice(["sentence-transformers", "openai", "sklearn"]),
              help="Model embeddings do u≈ºycia")
@click.option("--semantic-weight", default=0.7, help="Waga wyszukiwania semantycznego (0.0-1.0)")
@click.option("--limit", "-l", default=10, help="Liczba wynik√≥w")
@click.option("--min-score", default=0.3, help="Minimalny score podobie≈Ñstwa")
@click.option("--show-content/--no-content", default=False, help="Poka≈º fragmenty tre≈õci")
@click.option("--export", type=click.Choice(["json", "csv"]), help="Eksportuj wyniki")
@click.option("--output", "-o", help="Plik wyj≈õciowy dla eksportu")
@click.pass_context
def hybrid_search(ctx, query: str, model: str, semantic_weight: float, limit: int, 
                 min_score: float, show_content: bool, export: Optional[str], output: Optional[str]):
    """üîÑ Wyszukiwanie hybrydowe (semantyczne + pe≈Çnotekstowe)"""
    
    if not 0.0 <= semantic_weight <= 1.0:
        console.print("[red]‚ùå Waga semantyczna musi byƒá miƒôdzy 0.0 a 1.0[/red]")
        raise click.Abort()
    
    db = ctx.obj['db']
    search_engine = SearchEngine(db)
    
    with console.status(f"[bold blue]Generowanie embeddings dla zapytania..."):
        try:
            # Generowanie embedding dla zapytania
            provider = EmbeddingProvider()
            query_embedding = provider.encode(query, provider_name=model)
            
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd generowania embeddings: {e}[/red]")
            raise click.Abort()
    
    with console.status(f"[bold green]Wyszukiwanie hybrydowe..."):
        try:
            results = search_engine.hybrid_search(
                query=query,
                query_embedding=query_embedding,
                model_name=model,
                semantic_weight=semantic_weight,
                limit=limit,
                min_score=min_score
            )
            
            if not results:
                console.print("[yellow]üîç Nie znaleziono dokument√≥w pasujƒÖcych do zapytania[/yellow]")
                return
            
            # Wy≈õwietlenie wynik√≥w
            title = f"Wyszukiwanie Hybrydowe (semantyczne: {semantic_weight:.1%}, tekstowe: {1-semantic_weight:.1%})"
            _display_search_results(results, query, title, show_content)
            
            # Eksport je≈õli wymagany
            if export:
                _export_results(results, export, output, "hybrid_search")
                
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd wyszukiwania hybrydowego: {e}[/red]")

@search_group.command("recommend")
@click.argument("document_id", type=int)
@click.option("--model", default="sentence-transformers", 
              type=click.Choice(["sentence-transformers", "openai", "sklearn"]),
              help="Model embeddings do u≈ºycia")
@click.option("--limit", "-l", default=10, help="Liczba rekomendacji")
@click.option("--min-score", default=0.5, help="Minimalny score podobie≈Ñstwa")
@click.option("--show-content/--no-content", default=False, help="Poka≈º fragmenty tre≈õci")
@click.option("--export", type=click.Choice(["json", "csv"]), help="Eksportuj wyniki")
@click.option("--output", "-o", help="Plik wyj≈õciowy dla eksportu")
@click.pass_context
def recommend_documents(ctx, document_id: int, model: str, limit: int, min_score: float,
                       show_content: bool, export: Optional[str], output: Optional[str]):
    """üí° Rekomenduje dokumenty podobne do danego dokumentu"""
    
    db = ctx.obj['db']
    search_engine = SearchEngine(db)
    
    with console.status(f"[bold green]Wyszukiwanie podobnych dokument√≥w..."):
        try:
            # Sprawdzenie czy dokument istnieje
            with db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT title FROM documents WHERE id = %s", (document_id,))
                    row = cur.fetchone()
                    if not row:
                        console.print(f"[red]‚ùå Nie znaleziono dokumentu o ID: {document_id}[/red]")
                        raise click.Abort()
                    
                    source_title = row[0]
            
            results = search_engine.recommend_similar(
                document_id=document_id,
                model_name=model,
                limit=limit + 1,  # +1 bo usuniemy dokument ≈∫r√≥d≈Çowy
                min_score=min_score
            )
            
            # Usuniƒôcie dokumentu ≈∫r√≥d≈Çowego z wynik√≥w
            results = [r for r in results if r['id'] != document_id][:limit]
            
            if not results:
                console.print(f"[yellow]üîç Nie znaleziono dokument√≥w podobnych do '{source_title}'[/yellow]")
                return
            
            # Wy≈õwietlenie wynik√≥w
            title = f"Rekomendacje dla: '{source_title}' (ID: {document_id})"
            _display_search_results(results, "", title, show_content)
            
            # Eksport je≈õli wymagany
            if export:
                _export_results(results, export, output, "recommendations")
                
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd generowania rekomendacji: {e}[/red]")

@search_group.command("interactive")
@click.option("--model", default="sentence-transformers", 
              type=click.Choice(["sentence-transformers", "openai", "sklearn"]),
              help="Model embeddings do u≈ºycia")
@click.option("--search-type", default="hybrid",
              type=click.Choice(["text", "semantic", "hybrid"]),
              help="Typ wyszukiwania")
@click.pass_context
def interactive_search(ctx, model: str, search_type: str):
    """üí¨ Interaktywne wyszukiwanie dokument√≥w"""
    
    console.print(Panel.fit(
        "üîç [bold]Interaktywne Wyszukiwanie Dokument√≥w[/bold]\n"
        "Wpisz zapytanie lub 'exit' aby zako≈Ñczyƒá.\n"
        f"Tryb: [cyan]{search_type}[/cyan] | Model: [cyan]{model}[/cyan]",
        border_style="blue"
    ))
    
    db = ctx.obj['db']
    search_engine = SearchEngine(db)
    provider = EmbeddingProvider() if search_type in ["semantic", "hybrid"] else None
    
    while True:
        try:
            query = Prompt.ask("\n[bold cyan]Zapytanie[/bold cyan]")
            
            if query.lower() in ['exit', 'quit', 'q']:
                console.print("[green]üëã Do widzenia![/green]")
                break
            
            if not query.strip():
                continue
            
            with console.status(f"[bold green]Wyszukiwanie..."):
                if search_type == "text":
                    results = search_engine.text_search(query, limit=5)
                elif search_type == "semantic":
                    query_embedding = provider.encode(query, provider_name=model)
                    results = search_engine.semantic_search(query_embedding, model, limit=5)
                else:  # hybrid
                    query_embedding = provider.encode(query, provider_name=model)
                    results = search_engine.hybrid_search(query, query_embedding, model, limit=5)
            
            if results:
                _display_search_results(results, query, f"Wyniki ({search_type})", show_content=False)
            else:
                console.print("[yellow]üîç Brak wynik√≥w[/yellow]")
                
        except KeyboardInterrupt:
            console.print("\n[green]üëã Do widzenia![/green]")
            break
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd: {e}[/red]")

def _display_search_results(results: List[Dict[str, Any]], query: str, title: str, show_content: bool = False):
    """Wy≈õwietla wyniki wyszukiwania w formacie tabeli"""
    
    # G≈Ç√≥wna tabela wynik√≥w
    table = Table(title=f"üîç {title}")
    table.add_column("ID", style="cyan", width=6)
    table.add_column("Score", style="green", width=8)
    table.add_column("Tytu≈Ç", style="bold", width=35)
    table.add_column("≈πr√≥d≈Ço", style="yellow", width=15)
    
    if show_content:
        table.add_column("Fragment", style="dim", width=40)
    
    for result in results:
        score_str = f"{result['score']:.3f}" if 'score' in result else "N/A"
        source = result.get('metadata', {}).get('source', '-') if result.get('metadata') else '-'
        
        row_data = [
            str(result['id']),
            score_str,
            result['title'][:35] + "..." if len(result['title']) > 35 else result['title'],
            source
        ]
        
        if show_content:
            content_preview = result.get('content', '')[:40] + "..." if result.get('content') else ""
            row_data.append(content_preview)
        
        table.add_row(*row_data)
    
    console.print(table)
    
    # Statystyki
    if results:
        avg_score = sum(r.get('score', 0) for r in results) / len(results)
        stats_text = f"Znaleziono: [bold]{len(results)}[/bold] dokument√≥w | "
        stats_text += f"≈öredni score: [bold]{avg_score:.3f}[/bold]"
        
        if query:
            stats_text += f" | Zapytanie: '[italic]{query}[/italic]'"
        
        console.print(f"\n[dim]{stats_text}[/dim]")

def _export_results(results: List[Dict[str, Any]], format_type: str, output: Optional[str], search_type: str):
    """Eksportuje wyniki do pliku JSON lub CSV"""
    
    if not output:
        output = f"{search_type}_results.{format_type}"
    
    try:
        if format_type == "json":
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        elif format_type == "csv":
            import csv
            with open(output, 'w', newline='', encoding='utf-8') as f:
                if results:
                    writer = csv.DictWriter(f, fieldnames=results[0].keys())
                    writer.writeheader()
                    writer.writerows(results)
        
        console.print(f"[green]üìÅ Wyniki wyeksportowane do: {output}[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå B≈ÇƒÖd eksportu: {e}[/red]")

@search_group.command("history")
@click.option("--limit", "-l", default=20, help="Liczba ostatnich wyszukiwa≈Ñ")
@click.option("--clear", is_flag=True, help="Wyczy≈õƒá historiƒô wyszukiwa≈Ñ")
@click.pass_context
def search_history(ctx, limit: int, clear: bool):
    """üìö Historia wyszukiwa≈Ñ (je≈õli zaimplementowana w bazie danych)"""
    
    if clear:
        console.print("[yellow]‚ö†Ô∏è Funkcja czyszczenia historii nie jest jeszcze zaimplementowana[/yellow]")
        return
    
    console.print("[yellow]üí° Historia wyszukiwa≈Ñ nie jest jeszcze zaimplementowana[/yellow]")
    console.print("[dim]Przysz≈Çe wydanie bƒôdzie zawieraƒá ≈õledzenie historii zapyta≈Ñ z metrykami wydajno≈õci[/dim]")