"""
Komendy CLI do zarzƒÖdzania dokumentami.
"""

import logging
from pathlib import Path
from typing import Optional, Dict, Any
import json

import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel

from semantic_doc_search.core.database import get_sync_session, db_manager
from semantic_doc_search.core.models import Document, DocumentEmbedding, EmbeddingModel
from semantic_doc_search.core.embeddings import embedding_manager
from semantic_doc_search.config.settings import config

console = Console()
logger = logging.getLogger(__name__)


@click.group(name="docs")
def docs_group():
    """ZarzƒÖdzanie dokumentami w systemie."""
    pass


@docs_group.command()
@click.option(
    "--title", "-t",
    required=True,
    help="Tytu≈Ç dokumentu"
)
@click.option(
    "--content", "-c",
    help="Tre≈õƒá dokumentu (alternatywnie u≈ºyj --file)"
)
@click.option(
    "--file", "-f",
    type=click.Path(exists=True),
    help="≈öcie≈ºka do pliku z tre≈õciƒÖ dokumentu"
)
@click.option(
    "--source", "-s",
    help="≈πr√≥d≈Ço dokumentu (np. nazwa pliku, URL)"
)
@click.option(
    "--metadata",
    help="Metadane dokumentu w formacie JSON"
)
@click.option(
    "--embed/--no-embed",
    default=True,
    help="Czy generowaƒá embeddings dla dokumentu"
)
@click.option(
    "--model", "-m",
    help="Model embeddings do u≈ºycia (domy≈õlnie z konfiguracji)"
)
@click.option(
    "--chunk-size",
    type=int,
    help="Rozmiar chunk√≥w tekstu (domy≈õlnie z konfiguracji)"
)
def add(
    title: str,
    content: Optional[str],
    file: Optional[str],
    source: Optional[str],
    metadata: Optional[str],
    embed: bool,
    model: Optional[str],
    chunk_size: Optional[int]
):
    """Dodaje nowy dokument do systemu."""
    
    # Pobierz tre≈õƒá z pliku je≈õli podano
    if file:
        file_path = Path(file)
        try:
            content = file_path.read_text(encoding='utf-8')
            if not source:
                source = file_path.name
        except Exception as e:
            console.print(f"‚ùå B≈ÇƒÖd podczas czytania pliku: {e}", style="red")
            return
    
    if not content:
        console.print("‚ùå Musisz podaƒá tre≈õƒá dokumentu (--content) lub plik (--file)", style="red")
        return
    
    # Parsuj metadane
    doc_metadata = {}
    if metadata:
        try:
            doc_metadata = json.loads(metadata)
        except json.JSONDecodeError as e:
            console.print(f"‚ùå B≈Çƒôdny format JSON w metadanych: {e}", style="red")
            return
    
    try:
        with get_sync_session() as session:
            # Utw√≥rz dokument
            document = Document(
                title=title,
                content=content,
                source=source,
                doc_metadata=doc_metadata
            )
            
            session.add(document)
            session.flush()  # Pobierz ID bez commita
            
            console.print(f"‚úÖ Dokument dodany z ID: {document.id}")
            
            # Generuj embeddings je≈õli requested
            if embed:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=console
                ) as progress:
                    task = progress.add_task("üß† Generowanie embeddings...", total=None)
                    
                    try:
                        _generate_embeddings_for_document(
                            session, document, model, chunk_size
                        )
                        progress.update(task, description="‚úÖ Embeddings wygenerowane")
                        
                    except Exception as e:
                        progress.update(task, description="‚ùå B≈ÇƒÖd embeddings")
                        console.print(f"‚ö†Ô∏è  B≈ÇƒÖd podczas generowania embeddings: {e}", style="yellow")
            
            session.commit()
            
            # Poka≈º podsumowanie
            _show_document_summary(document, embed)
            
    except Exception as e:
        console.print(f"‚ùå B≈ÇƒÖd podczas dodawania dokumentu: {e}", style="red")
        logger.exception("Error adding document")


@docs_group.command()
@click.argument("document_id", type=int)
@click.option(
    "--show-content/--no-content",
    default=False,
    help="Czy pokazaƒá pe≈ÇnƒÖ tre≈õƒá dokumentu"
)
@click.option(
    "--show-embeddings/--no-embeddings",
    default=False,
    help="Czy pokazaƒá informacje o embeddings"
)
def show(document_id: int, show_content: bool, show_embeddings: bool):
    """Wy≈õwietla szczeg√≥≈Çy dokumentu."""
    
    try:
        with get_sync_session() as session:
            document = session.query(Document).filter(Document.id == document_id).first()
            
            if not document:
                console.print(f"‚ùå Dokument o ID {document_id} nie istnieje", style="red")
                return
            
            # Panel z podstawowymi informacjami
            info_text = f"""
üìÑ **Tytu≈Ç:** {document.title}
üè∑Ô∏è  **ID:** {document.id}
üìÖ **Utworzony:** {document.created_at.strftime('%Y-%m-%d %H:%M:%S')}
üìù **Zaktualizowany:** {document.updated_at.strftime('%Y-%m-%d %H:%M:%S')}
üìä **D≈Çugo≈õƒá:** {len(document.content)} znak√≥w
"""
            
            if document.source:
                info_text += f"üîó **≈πr√≥d≈Ço:** {document.source}\n"
            
            if document.doc_metadata:
                info_text += f"üìã **Metadane:** {json.dumps(document.doc_metadata, indent=2, ensure_ascii=False)}\n"
            
            console.print(Panel(info_text, title="üìÑ Informacje o dokumencie", border_style="blue"))
            
            # Tre≈õƒá dokumentu
            if show_content:
                content_preview = document.content[:1000] + "..." if len(document.content) > 1000 else document.content
                console.print(Panel(content_preview, title="üìù Tre≈õƒá dokumentu", border_style="green"))
            
            # Embeddings
            if show_embeddings:
                embeddings = session.query(DocumentEmbedding)\
                    .filter(DocumentEmbedding.document_id == document_id)\
                    .all()
                
                if embeddings:
                    table = Table(title="üß† Embeddings")
                    table.add_column("Model", style="cyan")
                    table.add_column("Wymiar", style="magenta")
                    table.add_column("Chunki", style="green")
                    table.add_column("Utworzone", style="yellow")
                    
                    models_stats = {}
                    for emb in embeddings:
                        if emb.embedding_model not in models_stats:
                            models_stats[emb.embedding_model] = {
                                'dimension': emb.embedding_dimension,
                                'chunks': 0,
                                'created': emb.created_at
                            }
                        models_stats[emb.embedding_model]['chunks'] += 1
                    
                    for model, stats in models_stats.items():
                        table.add_row(
                            model,
                            str(stats['dimension']),
                            str(stats['chunks']),
                            stats['created'].strftime('%Y-%m-%d %H:%M')
                        )
                    
                    console.print(table)
                else:
                    console.print("üì≠ Brak embeddings dla tego dokumentu", style="yellow")
                    
    except Exception as e:
        console.print(f"‚ùå B≈ÇƒÖd podczas pobierania dokumentu: {e}", style="red")
        logger.exception("Error showing document")


@docs_group.command()
@click.argument("document_id", type=int)
@click.option(
    "--title", "-t",
    help="Nowy tytu≈Ç dokumentu"
)
@click.option(
    "--content", "-c",
    help="Nowa tre≈õƒá dokumentu"
)
@click.option(
    "--file", "-f",
    type=click.Path(exists=True),
    help="Plik z nowƒÖ tre≈õciƒÖ dokumentu"
)
@click.option(
    "--source", "-s",
    help="Nowe ≈∫r√≥d≈Ço dokumentu"
)
@click.option(
    "--metadata",
    help="Nowe metadane w formacie JSON"
)
@click.option(
    "--regenerate-embeddings/--keep-embeddings",
    default=False,
    help="Czy przegenererowaƒá embeddings po aktualizacji"
)
@click.option(
    "--model", "-m",
    help="Model embeddings do u≈ºycia przy regeneracji"
)
def update(
    document_id: int,
    title: Optional[str],
    content: Optional[str],
    file: Optional[str],
    source: Optional[str],
    metadata: Optional[str],
    regenerate_embeddings: bool,
    model: Optional[str]
):
    """Aktualizuje istniejƒÖcy dokument."""
    
    # Pobierz tre≈õƒá z pliku je≈õli podano
    if file:
        file_path = Path(file)
        try:
            content = file_path.read_text(encoding='utf-8')
        except Exception as e:
            console.print(f"‚ùå B≈ÇƒÖd podczas czytania pliku: {e}", style="red")
            return
    
    # Parsuj metadane
    doc_metadata = None
    if metadata:
        try:
            doc_metadata = json.loads(metadata)
        except json.JSONDecodeError as e:
            console.print(f"‚ùå B≈Çƒôdny format JSON w metadanych: {e}", style="red")
            return
    
    try:
        with get_sync_session() as session:
            document = session.query(Document).filter(Document.id == document_id).first()
            
            if not document:
                console.print(f"‚ùå Dokument o ID {document_id} nie istnieje", style="red")
                return
            
            # Aktualizuj pola
            updated_fields = []
            
            if title is not None:
                document.title = title
                updated_fields.append("tytu≈Ç")
            
            if content is not None:
                document.content = content
                updated_fields.append("tre≈õƒá")
            
            if source is not None:
                document.source = source
                updated_fields.append("≈∫r√≥d≈Ço")
            
            if doc_metadata is not None:
                document.doc_metadata = doc_metadata
                updated_fields.append("metadane")
            
            if not updated_fields:
                console.print("‚ö†Ô∏è  Nie podano ≈ºadnych zmian", style="yellow")
                return
            
            session.flush()
            
            console.print(f"‚úÖ Zaktualizowano: {', '.join(updated_fields)}")
            
            # Regeneruj embeddings je≈õli requested
            if regenerate_embeddings:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=console
                ) as progress:
                    task = progress.add_task("üîÑ Regenerowanie embeddings...", total=None)
                    
                    try:
                        # Usu≈Ñ stare embeddings
                        session.query(DocumentEmbedding)\
                            .filter(DocumentEmbedding.document_id == document_id)\
                            .delete()
                        
                        # Generuj nowe
                        _generate_embeddings_for_document(session, document, model)
                        progress.update(task, description="‚úÖ Embeddings zregenerowane")
                        
                    except Exception as e:
                        progress.update(task, description="‚ùå B≈ÇƒÖd regeneracji")
                        console.print(f"‚ö†Ô∏è  B≈ÇƒÖd podczas regeneracji embeddings: {e}", style="yellow")
            
            session.commit()
            console.print("üéâ Dokument zaktualizowany pomy≈õlnie!", style="green")
            
    except Exception as e:
        console.print(f"‚ùå B≈ÇƒÖd podczas aktualizacji dokumentu: {e}", style="red")
        logger.exception("Error updating document")


@docs_group.command()
@click.argument("document_id", type=int)
@click.option(
    "--force", "-f",
    is_flag=True,
    help="Usu≈Ñ bez potwierdzenia"
)
def delete(document_id: int, force: bool):
    """Usuwa dokument z systemu."""
    
    try:
        with get_sync_session() as session:
            document = session.query(Document).filter(Document.id == document_id).first()
            
            if not document:
                console.print(f"‚ùå Dokument o ID {document_id} nie istnieje", style="red")
                return
            
            # Poka≈º informacje o dokumencie
            console.print(f"üìÑ Dokument do usuniƒôcia:")
            console.print(f"   ID: {document.id}")
            console.print(f"   Tytu≈Ç: {document.title}")
            console.print(f"   D≈Çugo≈õƒá: {len(document.content)} znak√≥w")
            
            # Sprawd≈∫ liczbƒô embeddings
            embeddings_count = session.query(DocumentEmbedding)\
                .filter(DocumentEmbedding.document_id == document_id)\
                .count()
            
            if embeddings_count > 0:
                console.print(f"   üß† Embeddings: {embeddings_count}")
            
            # Potwierdzenie
            if not force:
                if not click.confirm("‚ùì Czy na pewno chcesz usunƒÖƒá ten dokument?"):
                    console.print("üö´ Anulowano", style="yellow")
                    return
            
            # Usu≈Ñ dokument (embeddings zostanƒÖ usuniƒôte przez CASCADE)
            session.delete(document)
            session.commit()
            
            console.print("‚úÖ Dokument zosta≈Ç usuniƒôty", style="green")
            
    except Exception as e:
        console.print(f"‚ùå B≈ÇƒÖd podczas usuwania dokumentu: {e}", style="red")
        logger.exception("Error deleting document")


@docs_group.command()
@click.option(
    "--limit", "-l",
    default=20,
    help="Liczba dokument√≥w do wy≈õwietlenia"
)
@click.option(
    "--offset", "-o",
    default=0,
    help="Przesuniƒôcie (paginacja)"
)
@click.option(
    "--source",
    help="Filtruj po ≈∫r√≥dle"
)
@click.option(
    "--format", "output_format",
    type=click.Choice(['table', 'json']),
    default='table',
    help="Format wyj≈õciowy"
)
def list(limit: int, offset: int, source: Optional[str], output_format: str):
    """Wy≈õwietla listƒô dokument√≥w w systemie."""
    
    try:
        with get_sync_session() as session:
            query = session.query(Document)
            
            # Filtr po ≈∫r√≥dle
            if source:
                query = query.filter(Document.source == source)
            
            # Zlicz total
            total = query.count()
            
            # Pobierz dokumenty z paginacjƒÖ
            documents = query.order_by(Document.created_at.desc())\
                .offset(offset)\
                .limit(limit)\
                .all()
            
            if not documents:
                console.print("üì≠ Brak dokument√≥w", style="yellow")
                return
            
            if output_format == 'json':
                # Format JSON
                docs_data = []
                for doc in documents:
                    docs_data.append(doc.to_dict())
                
                console.print(json.dumps(docs_data, indent=2, ensure_ascii=False, default=str))
            
            else:
                # Format tabeli
                table = Table(title=f"üìö Dokumenty ({offset + 1}-{offset + len(documents)} z {total})")
                table.add_column("ID", style="cyan", width=6)
                table.add_column("Tytu≈Ç", style="bold")
                table.add_column("≈πr√≥d≈Ço", style="green")
                table.add_column("D≈Çugo≈õƒá", style="magenta", width=10)
                table.add_column("Utworzony", style="yellow", width=12)
                
                for doc in documents:
                    title = doc.title[:50] + "..." if len(doc.title) > 50 else doc.title
                    source_display = doc.source[:20] + "..." if doc.source and len(doc.source) > 20 else (doc.source or "-")
                    
                    table.add_row(
                        str(doc.id),
                        title,
                        source_display,
                        f"{len(doc.content):,}",
                        doc.created_at.strftime('%m-%d %H:%M')
                    )
                
                console.print(table)
                
                # Informacje o paginacji
                if total > offset + limit:
                    console.print(f"\nüí° U≈ºyj --offset {offset + limit} aby zobaczyƒá wiƒôcej")
                    
    except Exception as e:
        console.print(f"‚ùå B≈ÇƒÖd podczas pobierania listy dokument√≥w: {e}", style="red")
        logger.exception("Error listing documents")


def _generate_embeddings_for_document(
    session,
    document: Document,
    model_name: Optional[str] = None,
    chunk_size: Optional[int] = None
) -> None:
    """Generuje embeddings dla dokumentu."""
    
    if model_name is None:
        model_name = config.embedding.default_model
    
    if chunk_size is None:
        chunk_size = config.embedding.chunk_size
    
    # Podziel tre≈õƒá na chunki
    content = document.content
    chunks = []
    
    if len(content) <= chunk_size:
        chunks = [content]
    else:
        overlap = config.embedding.chunk_overlap
        for i in range(0, len(content), chunk_size - overlap):
            chunk = content[i:i + chunk_size]
            if chunk.strip():
                chunks.append(chunk)
    
    # Generuj embeddings
    embedding_result = embedding_manager.generate_embeddings(chunks, model_name)
    
    # Zapisz embeddings do bazy
    for i, (chunk_text, embedding) in enumerate(zip(chunks, embedding_result.embeddings)):
        doc_embedding = DocumentEmbedding(
            document_id=document.id,
            chunk_index=i,
            chunk_text=chunk_text,
            embedding_model=model_name,
            embedding_dimension=embedding_result.dimension,
            embedding=embedding
        )
        session.add(doc_embedding)


def _show_document_summary(document: Document, has_embeddings: bool) -> None:
    """Wy≈õwietla podsumowanie dodanego dokumentu."""
    
    summary_text = f"""
‚úÖ **Dokument zosta≈Ç pomy≈õlnie dodany!**

üìÑ **ID:** {document.id}
üè∑Ô∏è  **Tytu≈Ç:** {document.title}
üìä **D≈Çugo≈õƒá:** {len(document.content):,} znak√≥w
"""
    
    if document.source:
        summary_text += f"üîó **≈πr√≥d≈Ço:** {document.source}\n"
    
    if has_embeddings:
        summary_text += "üß† **Embeddings:** Wygenerowane\n"
    
    console.print(Panel(summary_text, border_style="green"))