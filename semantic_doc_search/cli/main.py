# semantic_doc_search/cli/main.py
"""
G≈Ç√≥wny modu≈Ç CLI dla systemu semantycznego wyszukiwania dokument√≥w.
Wykorzystuje Click 8.2.0 z Rich dla kolorowego interfejsu.
"""

import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import track
from rich import print as rprint

from semantic_doc_search.config.settings import get_settings
from semantic_doc_search.core.database import Database
from semantic_doc_search.cli.document_manager import document_group
from semantic_doc_search.cli.search_commands import search_group

console = Console()

@click.group()
@click.version_option(version="1.0.0", message="%(prog)s %(version)s")
@click.pass_context
def cli(ctx: click.Context) -> None:
    """
    üîç Semantic Document Search - System semantycznego wyszukiwania dokument√≥w
    
    Zaawansowany system wyszukiwania wykorzystujƒÖcy PostgreSQL z pgvector
    do semantycznego wyszukiwania i rekomendacji dokument√≥w.
    """
    ctx.ensure_object(dict)
    
    # Inicjalizacja konfiguracji
    try:
        ctx.obj['settings'] = get_settings()
        ctx.obj['db'] = Database()
    except Exception as e:
        console.print(f"[red]‚ùå B≈ÇƒÖd inicjalizacji: {e}[/red]")
        raise click.Abort()

@cli.command()
@click.pass_context
def init(ctx: click.Context) -> None:
    """üöÄ Inicjalizuje system i bazƒô danych"""
    settings = ctx.obj['settings']
    
    with console.status("[bold green]Inicjalizacja systemu..."):
        try:
            # Sprawdzenie po≈ÇƒÖczenia z bazƒÖ
            db = ctx.obj['db']
            db.initialize()
            
            console.print("\n[bold green]‚úÖ System zosta≈Ç pomy≈õlnie zainicjalizowany![/bold green]")
            
            # Wy≈õwietlenie informacji o konfiguracji
            config_table = Table(title="üîß Konfiguracja Systemu")
            config_table.add_column("Parametr", style="cyan")
            config_table.add_column("Warto≈õƒá", style="green")
            
            config_table.add_row("Baza danych", f"{settings.database.host}:{settings.database.port}/{settings.database.name}")
            config_table.add_row("Model embeddings", settings.embedding.sentence_transformers_model)
            config_table.add_row("Waga semantyczna", str(settings.search.default_semantic_weight))
            
            console.print(config_table)
            
        except Exception as e:
            console.print(f"[red]‚ùå B≈ÇƒÖd inicjalizacji: {e}[/red]")
            raise click.Abort()

@cli.command()
@click.pass_context
def status(ctx: click.Context) -> None:
    """üìä Wy≈õwietla status systemu i statystyki"""
    db = ctx.obj['db']
    
    try:
        stats = db.get_stats()
        
        # Utworzenie tabeli statusu
        status_table = Table(title="üìà Status Systemu")
        status_table.add_column("Metryka", style="cyan")
        status_table.add_column("Warto≈õƒá", style="green")
        
        status_table.add_row("Dokumenty", str(stats.get('active_documents', 0)))
        status_table.add_row("Embeddings", str(stats.get('total_embeddings', 0)))
        status_table.add_row("Modele", str(stats.get('unique_models', 0)))
        
        console.print(status_table)
        
        if stats.get('active_documents', 0) == 0:
            console.print("\n[yellow]üí° Brak dokument√≥w w systemie. U≈ºyj 'semantic-docs docs add' aby dodaƒá pierwszy dokument.[/yellow]")
                
    except Exception as e:
        console.print(f"[red]‚ùå B≈ÇƒÖd pobierania statusu: {e}[/red]")

@cli.command()
@click.pass_context  
def health(ctx: click.Context) -> None:
    """ü©∫ Sprawdza kondycjƒô systemu"""
    settings = ctx.obj['settings']
    
    health_checks: list[tuple[str, str, str]] = []
    
    # Sprawdzenie bazy danych
    try:
        db = ctx.obj['db']
        db.test_connection()
        health_checks.append(("Baza danych PostgreSQL", "‚úÖ OK", "Po≈ÇƒÖczenie nawiƒÖzane"))
        
        # Sprawdzenie pgvector
        with db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT installed_version FROM pg_available_extensions WHERE name = 'vector'")
                vector_version = cur.fetchone()
                
        if vector_version:
            health_checks.append(("Rozszerzenie pgvector", "‚úÖ OK", vector_version[0] or "Zainstalowane"))
        else:
            health_checks.append(("Rozszerzenie pgvector", "‚ùå B≈ÅƒÑD", "Nie zainstalowane"))
            
    except Exception as e:
        health_checks.append(("Baza danych PostgreSQL", "‚ùå B≈ÅƒÑD", str(e)))
    
    # Sprawdzenie modeli embeddings
    try:
        from semantic_doc_search.core.embeddings import EmbeddingProvider
        provider = EmbeddingProvider()
        test_embedding = provider.encode("test", provider_name="sentence-transformers")
        health_checks.append(("Model Sentence Transformers", "‚úÖ OK", f"Wymiar: {len(test_embedding)}"))
    except Exception as e:
        health_checks.append(("Model Sentence Transformers", "‚ùå B≈ÅƒÑD", str(e)))
    
    # Sprawdzenie OpenAI (je≈õli skonfigurowane)
    if settings.embedding.openai_api_key:
        try:
            from semantic_doc_search.core.embeddings import EmbeddingProvider
            provider = EmbeddingProvider()
            test_embedding = provider.encode("test", provider_name="openai")
            health_checks.append(("Model OpenAI", "‚úÖ OK", f"Wymiar: {len(test_embedding)}"))
        except Exception as e:
            health_checks.append(("Model OpenAI", "‚ùå B≈ÅƒÑD", str(e)))
    else:
        health_checks.append(("Model OpenAI", "‚ö†Ô∏è POMI≈É", "Brak klucza API"))
    
    # Wy≈õwietlenie wynik√≥w
    health_table = Table(title="ü©∫ Sprawdzenie Kondycji Systemu")
    health_table.add_column("Komponent", style="cyan")
    health_table.add_column("Status", style="bold")
    health_table.add_column("Szczeg√≥≈Çy", style="dim")
    
    for component, status, details in health_checks:
        health_table.add_row(component, status, details)
    
    console.print(health_table)

# Rejestracja grup komend
cli.add_command(document_group, name="docs")
cli.add_command(search_group, name="search")

if __name__ == "__main__":
    cli()