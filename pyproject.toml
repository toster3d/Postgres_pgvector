# Poprawiony plik pyproject.toml dla Semantycznego Wyszukiwania Dokumentów
# Ten plik naprawia błąd ModuleNotFoundError: No module named 'psycopg_pool'

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semantic-doc-search"
version = "1.0.0"
description = "System do semantycznego wyszukiwania i rekomendacji dokumentów z PostgreSQL i pgvector"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Student", email = "student@example.com"}
]
keywords = ["postgresql", "pgvector", "semantic-search", "embeddings", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"

# KLUCZOWA SEKCJA - Poprawne zależności dla psycopg3 z pooling
dependencies = [
    # PostgreSQL adapter z connection pooling
    "psycopg[binary,pool]>=3.2.0",  # psycopg3 z pooling i optimizations
    
    # SQLAlchemy i async postgres adapter
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",  # Async PostgreSQL adapter dla SQLAlchemy
    "pgvector>=0.2.0",  # Python binding dla pgvector
    
    # Embeddings i ML
    "sentence-transformers>=3.0.0",
    "scikit-learn>=1.3.0", 
    "numpy>=1.26.0",
    "torch>=2.0.0",
    "openai>=1.0.0",  # OpenAI dla embeddings
    
    # CLI i interfejs
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.12.0",
    
    # Konfiguracja i walidacja
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    
    # Utilities
    "requests>=2.31.0",
    "tqdm>=4.66.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
# Opcjonalne zależności dla różnych use cases
openai = [
    "openai>=1.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]
all = [
    "semantic-doc-search[openai,dev,test,docs]"
]

[project.scripts]
semantic-docs = "semantic_doc_search.cli.main:cli"

[project.urls]
Homepage = "https://github.com/username/semantic-doc-search"
Repository = "https://github.com/username/semantic-doc-search"
Documentation = "https://semantic-doc-search.readthedocs.io"
"Bug Tracker" = "https://github.com/username/semantic-doc-search/issues"

# Konfiguracja narzędzi deweloperskich
[tool.setuptools.packages.find]
where = ["."]
include = ["semantic_doc_search*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
semantic_doc_search = ["sql/*.sql", "config/*.yaml"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["semantic_doc_search"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "manage.py",
    "semantic_doc_search/settings/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]