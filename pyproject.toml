[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semantic-document-search"
version = "1.0.0"
description = "Semantyczne wyszukiwanie dokumentów naukowych z PostgreSQL i pgvector"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Student", email = "student@example.com"},
]
keywords = ["semantic search", "postgresql", "pgvector", "nlp", "embeddings"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database",
]

# Główne zależności
dependencies = [
    # Baza danych PostgreSQL
    "psycopg[binary,pool]>=3.2.0",
    "pgvector>=0.3.0",
    # Hugging Face i embeddings
    "datasets>=2.20.0",
    "sentence-transformers>=3.1.0",
    "transformers>=4.44.0",
    "torch>=2.4.0",
    # Przetwarzanie tekstu
    "nltk>=3.8.1",
    "spacy>=3.7.0",
    "beautifulsoup4>=4.12.0",
    # OpenAI (opcjonalne)
    "openai>=1.40.0",
    # Narzędzia CLI i interfejs
    "click>=8.1.0",
    "rich>=13.7.0",
    "tqdm>=4.66.0",
    # Przetwarzanie danych
    "pandas>=2.2.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.5.0",
    # Konfiguracja
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "python-dotenv>=1.0.0",
    # Logowanie i debugging
    "loguru>=0.7.0",
    # Utilities
    "uuid>=1.30",
    "jsonschema>=4.23.0",
]

# Opcjonalne zależności
[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

performance = [
    "psutil>=6.0.0",
    "memory-profiler>=0.61.0",
]

all = [
    "semantic-document-search[dev,docs,performance]",
]

[project.urls]
Homepage = "https://github.com/student/semantic-document-search"
Repository = "https://github.com/student/semantic-document-search"
Documentation = "https://semantic-document-search.readthedocs.io"
Issues = "https://github.com/student/semantic-document-search/issues"

# Konfiguracja setuptools
[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*"]

# Konfiguracja Black (formatowanie kodu)
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Konfiguracja isort (sortowanie importów)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scripts"]

# Konfiguracja mypy (sprawdzanie typów)
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "datasets.*",
    "sentence_transformers.*",
    "pgvector.*",
    "nltk.*",
    "spacy.*",
]
ignore_missing_imports = true

# Konfiguracja pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Konfiguracja coverage
[tool.coverage.run]
source = ["scripts"]
omit = [
    "tests/*",
    "setup.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
